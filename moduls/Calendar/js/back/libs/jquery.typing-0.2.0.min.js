(function ($) {

    //--------------------
    //  jQuery extension
    //--------------------

    $.fn.typing = function (options) {
        return this.each(function (i, elem) {
            listenToTyping(elem, options);
        });
    };


    //-------------------
    //  actual function
    //-------------------

    function listenToTyping(elem, options) {
        // override default settings
        var settings = $.extend({
            start: null,
            stop: null,
            delay: 400
        }, options);

        // create other function-scope variables
        var $elem = $(elem),
                typing = false,
                delayedCallback;

        // start typing
        function startTyping(event) {
            if (!typing) {
                // set flag and run callback
                typing = true;
                if (settings.start) {
                    settings.start(event, $elem);
                }
            }
        }

        // stop typing
        function stopTyping(event, delay) {
            if (typing) {
                // discard previous delayed callback and create new one
                clearTimeout(delayedCallback);
                delayedCallback = setTimeout(function () {
                    // set flag and run callback
                    typing = false;
                    if (settings.stop) {
                        settings.stop(event, $elem);
                    }
                }, delay >= 0 ? delay : settings.delay);
            }
        }

        // listen to regular keypresses
        $elem.keypress(startTyping);

        // listen to backspace and delete presses
        $elem.keydown(function (event) {
            if (event.keyCode === 8 || event.keyCode === 46) {
                startTyping(event);
            }
        });

        // listen to keyups
        $elem.keyup(stopTyping);

        // listen to blurs
        $elem.blur(function (event) {
            stopTyping(event, 0);
        });

        // listen to different events from typing
        $elem.on("cut paste", function (event) {
            // simulates typing
            startTyping(event);
            // call the stop function and fires the event immediately
            stopTyping(event, 0);
        });
    }

    $.fn.onTyping = function (target, options) {
        var $element = $(this);

        // override default settings
        var settings = $.extend({
            start: null,
            stop: null,
            delay: 400
        }, options);

        // start typing
        function startTyping(event) {
            var $target = $(event.target);
            if (!$target.data('typing')) {
                // set flag and run callback
                $target.data('typing', true);
                if (settings.start) {
                    settings.start(event, $target);
                }
            }
        }

        // stop typing
        function stopTyping(event, delay) {
            var $target = $(event.target);
            if ($target.data('typing')) {
                // discard previous delayed callback and create new one
                clearTimeout($target.data('delayedCallback'));
                $target.data('delayedCallback', setTimeout(function () {
                    // set flag and run callback
                    $target.data('typing', false);

                    if (settings.stop) {
                        settings.stop(event, $target);
                    }
                }, delay >= 0 ? delay : settings.delay));
            }
        }

        // listen to regular keypresses
        $element.on('keypress', target, startTyping);

        // listen to backspace and delete presses
        $element.on('keydown', target, function (event) {
            if (event.keyCode === 8 || event.keyCode === 46) {
                startTyping(event);
            }
        });

        // listen to keyups
        $element.on('keyup', target, stopTyping);

        // listen to blurs
        $element.on('blur', target, function (event) {
            stopTyping(event, 0);
        });

        // listen to different events from typing
        $element.on('cut paste', target, function (event) {
            // simulates typing
            startTyping(event);
            // call the stop function and fires the event immediately
            stopTyping(event, 0);
        });

        return this;
    };
})(jQuery);